/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,40],$V3=[1,25],$V4=[1,26],$V5=[1,29],$V6=[1,27],$V7=[1,28],$V8=[1,30],$V9=[1,31],$Va=[1,32],$Vb=[1,33],$Vc=[1,34],$Vd=[1,37],$Ve=[1,35],$Vf=[1,36],$Vg=[1,38],$Vh=[1,39],$Vi=[2,5,25,33,34,38,40,44,46,47,50,51,52,53,54,55,57,88,93,94,96,97],$Vj=[2,27],$Vk=[1,54],$Vl=[1,58],$Vm=[1,55],$Vn=[1,56],$Vo=[1,78],$Vp=[1,71],$Vq=[1,84],$Vr=[1,68],$Vs=[1,69],$Vt=[1,70],$Vu=[1,72],$Vv=[1,73],$Vw=[1,74],$Vx=[1,75],$Vy=[1,76],$Vz=[1,77],$VA=[1,79],$VB=[1,80],$VC=[1,81],$VD=[1,82],$VE=[33,35,36,62,65,69,78,79,80,81,82,83,84,85,86,87,88],$VF=[8,31,32,35,36,62,64,65],$VG=[2,25],$VH=[1,89],$VI=[1,109],$VJ=[1,110],$VK=[1,111],$VL=[1,112],$VM=[1,113],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[1,118],$VS=[1,119],$VT=[1,120],$VU=[1,121],$VV=[8,26,32,36,45,63,64,65,66,67,68,70,71,72,73,74,75,76,77],$VW=[8,36],$VX=[1,144],$VY=[32,36],$VZ=[8,26,32,36,45,63,76,77],$V_=[1,174],$V$=[32,63],$V01=[1,180],$V11=[31,62],$V21=[8,26,32,36,45,63,64,65,70,71,72,73,74,75,76,77],$V31=[8,26,32,36,45,63,70,71,72,73,74,75,76,77],$V41=[1,198],$V51=[8,26,32,36,45,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77],$V61=[1,210],$V71=[44,46];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"PRINT":7,"SEMICOLON":8,"DECLARATION":9,"ASSINGNEW":10,"ARRAY":11,"INCREMENT":12,"DECREMENT":13,"IF_S":14,"SWITCH_S":15,"WHILE_S":16,"DoWhile":17,"FOR_S":18,"BREAK_S":19,"CONTINUE_S":20,"RETURN_S":21,"METHOD_S":22,"EXECUTE_S":23,"CALL_S":24,"COUT":25,"DOUBLE_QUOTE":26,"EXPRESSION":27,"ENDL":28,"TYPES":29,"IDS":30,"ASSIGN":31,"COMMA":32,"ID":33,"IF":34,"LPAREN":35,"RPAREN":36,"LBRACE":37,"RBRACE":38,"ELSE":39,"SWITCH":40,"CASELIST":41,"DEFAULT_S":42,"CASE_S":43,"CASE":44,"COLON":45,"DEFAULT":46,"FOR":47,"FOR_S_DE":48,"FOR_S_UPD":49,"WHILE":50,"DO":51,"BREAK":52,"CONTINUE":53,"RETURN":54,"VOID_TYPE":55,"PARAMS_S":56,"EXECUTE":57,"PARAMS_CALL":58,"ARRAYBRACKET":59,"NEW":60,"ASSINGARRAY":61,"LBRACKET":62,"RBRACKET":63,"PLUS":64,"MINUS":65,"TIMES":66,"DIVIDE":67,"MOD":68,"POW":69,"EQUALS":70,"DIFFERENT":71,"LESS":72,"GREATER":73,"LESS_EQUAL":74,"GREATER_EQUAL":75,"OR":76,"AND":77,"NOT":78,"INTEGER":79,"FLOAT":80,"STRING":81,"TRUE":82,"FALSE":83,"CHAR":84,"TOLOWER":85,"TOUPPER":86,"ROUND":87,"STD":88,"TOSTRING":89,"LISTF":90,"INTERROGATION":91,"LIST":92,"INT_TYPE":93,"DOUBLE_TYPE":94,"STRING_TYPE":95,"CHAR_TYPE":96,"BOOL_TYPE":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SEMICOLON",25:"COUT",26:"DOUBLE_QUOTE",28:"ENDL",31:"ASSIGN",32:"COMMA",33:"ID",34:"IF",35:"LPAREN",36:"RPAREN",37:"LBRACE",38:"RBRACE",39:"ELSE",40:"SWITCH",44:"CASE",45:"COLON",46:"DEFAULT",47:"FOR",50:"WHILE",51:"DO",52:"BREAK",53:"CONTINUE",54:"RETURN",55:"VOID_TYPE",57:"EXECUTE",60:"NEW",62:"LBRACKET",63:"RBRACKET",64:"PLUS",65:"MINUS",66:"TIMES",67:"DIVIDE",68:"MOD",69:"POW",70:"EQUALS",71:"DIFFERENT",72:"LESS",73:"GREATER",74:"LESS_EQUAL",75:"GREATER_EQUAL",76:"OR",77:"AND",78:"NOT",79:"INTEGER",80:"FLOAT",81:"STRING",82:"TRUE",83:"FALSE",84:"CHAR",85:"TOLOWER",86:"TOUPPER",87:"ROUND",88:"STD",89:"TOSTRING",91:"INTERROGATION",93:"INT_TYPE",94:"DOUBLE_TYPE",95:"STRING_TYPE",96:"CHAR_TYPE",97:"BOOL_TYPE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[7,3],[7,5],[9,4],[9,2],[10,3],[10,1],[30,3],[30,1],[14,7],[14,9],[14,11],[15,8],[41,2],[41,1],[43,4],[42,3],[18,11],[48,1],[48,1],[49,1],[49,1],[49,1],[16,7],[17,8],[19,2],[20,2],[21,2],[21,3],[22,8],[22,7],[56,4],[56,2],[23,5],[23,4],[24,4],[24,3],[58,3],[58,1],[11,7],[11,5],[61,2],[59,3],[59,2],[12,3],[13,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,6],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,4],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,4],[27,4],[27,4],[27,7],[27,1],[27,7],[92,3],[92,1],[90,4],[90,3],[29,1],[29,1],[29,4],[29,1],[29,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$= $$[$0-1]; 
break;
case 3: case 29: case 35: case 59: case 99:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 19: case 20: case 83:
 this.$ = $$[$0-1]; 
break;
case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 39: case 40: case 41: case 42: case 43: case 96:
 this.$ = $$[$0]; 
break;
case 21:
 errores.push(new Errores.default('Sintáctico', 'Error en la definición de instrucción', _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 22:
 this.$ = new Cout.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 23:
 this.$ = new Cout.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column, true); 
break;
case 24:
 this.$ = new Declaration.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 25:
 this.$ = new Declaration.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 26:
 this.$ = new AssigneVar.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0]); 
break;
case 27:
 this.$ = new AssigneVar.default($$[$0], _$[$0].first_line, _$[$0].first_column, $$[$02]); 
break;
case 28:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 30:
 this.$ = new If.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column, false); 
break;
case 31:
 this.$ = new If.default($$[$0-6], $$[$0-3], _$[$0-8].first_line, _$[$0-8].first_column, true, $$[$0]); 
break;
case 32:
 this.$ = new If.default($$[$0-8], $$[$0-5], _$[$0-10].first_line, _$[$0-10].first_column, true, $$[$0-1]); 
break;
case 33:
 this.$ = new Switch.default($$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column, $$[$0-2], $$[$0-1]); 
break;
case 34:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 36:
 this.$ = new Case.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 37:
 this.$ = new Default.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 38:
 this.$ = new For.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 44:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 45:
 this.$ = new DoWhile.default($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 46:
 this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:
 this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 48:
 this.$ = new Return.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 49:
 this.$ = new Return.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 50:
 this.$ = new Method.default($$[$0-6], $$[$0-7], $$[$0-1], _$[$0-7].first_line, _$[$0-7].first_column, $$[$0-4]); 
break;
case 51:
 this.$ = new Method.default($$[$0-5], $$[$0-6], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column, []); 
break;
case 52:
 $$[$0-3].push({ typeDa: $$[$0-1], id: $$[$0] }); this.$ = $$[$0-3]; 
break;
case 53:
 this.$ = [{ typeDa: $$[$0-1], id: $$[$0] }]; 
break;
case 54:
 this.$ = new Execute.default($$[$0-3], _$[$0-4].first_line, _$[$0-4].first_column, $$[$0-1]); 
break;
case 55:
 this.$ = new Execute.default($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column, []); 
break;
case 56:
 this.$ = new Call.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-1]); 
break;
case 57:
 this.$ = new Call.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, []); 
break;
case 58: case 98:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 60:
 this.$ = new DeclarationArr.default($$[$0-6], $$[$0-5], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 61:
 this.$ = new DeclarationArr.default($$[$0-4], $$[$0-3], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 62:
 this.$ = new AssigneArr.default($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 63:
 this.$ = $$[$0-2]; 
break;
case 64:
 this.$ = []; 
break;
case 65:
 this.$ = new Increment.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 66:
 this.$ = new Decrement.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 67:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.PLUS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 68:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.MINUS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 69:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.TIMES, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 70:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 71:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.MOD, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 72:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.NEGATIVE, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 73:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.POWER, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 74:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.EQUALS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 75:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.DIFFERENT, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 76:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 77:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.GREATER, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 78:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.LESS_EQUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 79:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.GREATER_EQUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 80:
 this.$ = new Logicas.default(Logicas.LogicasOption.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 81:
 this.$ = new Logicas.default(Logicas.LogicasOption.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 82:
 this.$ = new Logicas.default(Logicas.LogicasOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 84:
 this.$ = new Casts.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 85:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.INT), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 86:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.FLOAT), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 87:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 88: case 89:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.BOOL), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 90:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.CHAR), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 91:
 this.$ = new AccessVar.default($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 92:
 this.$ = new ToLower.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 93:
 this.$ = new ToUpper.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 94:
 this.$ = new Round.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 95:
 this.$ = new ToString.default($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 97:
 this.$ = new Ternary.default($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 100:
 $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 101:
 this.$ = [$$[$0-1]]; 
break;
case 102:
this.$ = new TypeD.default(TypeD.typeData.INT);
break;
case 103:
this.$ = new TypeD.default(TypeD.typeData.FLOAT);
break;
case 104:
this.$ = new TypeD.default(TypeD.typeData.STRING);
break;
case 105:
this.$ = new TypeD.default(TypeD.typeData.CHAR);
break;
case 106:
this.$ = new TypeD.default(TypeD.typeData.BOOL);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{1:[3]},{2:$V0,5:[1,41],6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},o($Vi,[2,3]),{8:[1,43]},{8:[1,44]},{8:[1,45]},{8:[1,46]},{8:[1,47]},{8:[1,48]},o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,18]),{8:[1,49]},{8:[1,50]},{2:$V0,6:51,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{26:[1,52]},{30:53,33:$V2},{8:$Vj,31:$Vk,32:$Vl,35:[1,57],64:$Vm,65:$Vn},{35:[1,59]},{35:[1,60]},{35:[1,61]},{37:[1,62]},{35:[1,63]},{8:[1,64]},{8:[1,65]},{8:[1,66],27:67,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{30:85,33:$V2},{30:86,33:$V2},o($VE,[2,102]),o($VE,[2,103]),{45:[1,87]},o($VE,[2,105]),o($VE,[2,106]),o($VF,[2,29]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),{27:88,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{8:$VG,31:$VH,32:$Vl,59:90,62:[1,91]},{27:92,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{64:[1,93]},{65:[1,94]},{27:97,33:$Vo,35:$Vp,36:[1,96],58:95,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{33:[1,98]},{27:99,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:100,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:101,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{2:$V0,4:102,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{9:104,10:105,29:106,30:107,33:$V2,48:103,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},o($Vi,[2,46]),o($Vi,[2,47]),o($Vi,[2,48]),{8:[1,108],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{27:122,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{35:[1,123]},{27:124,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:125,29:126,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:[1,127],90:83,93:$Ve,94:$Vf,96:$Vg,97:$Vh},o($VV,[2,85]),o($VV,[2,86]),o($VV,[2,87]),o($VV,[2,88]),o($VV,[2,89]),o($VV,[2,90]),o($VV,[2,91]),{35:[1,128]},{35:[1,129]},{35:[1,130]},{45:[1,131]},o($VV,[2,96],{62:[1,132]}),{27:134,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83,92:133},{32:$Vl,35:[1,135]},{32:$Vl,35:[1,136]},{45:[1,137]},{8:[2,22],26:[1,138],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{27:139,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{31:[1,140],62:[1,141]},{63:[1,142]},o($VW,[2,26],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU}),o($VW,[2,65]),o($VW,[2,66]),{32:$VX,36:[1,143]},{8:[2,57]},o($VY,[2,59],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU}),o($VF,[2,28]),{36:[1,145],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{36:[1,146],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{36:[1,147],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,38:[1,148],40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{8:[1,149]},{8:[2,39]},{8:[2,40]},{30:150,33:$V2},{8:$Vj,31:$Vk,32:$Vl},o($Vi,[2,49]),{27:151,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:152,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:153,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:154,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:155,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:156,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:157,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:158,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:159,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:160,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:161,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:162,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:163,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},o($VV,[2,72]),{27:164,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},o($VZ,[2,82],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS}),{36:[1,165],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{36:[1,166]},{45:[1,167]},{27:168,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:169,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:170,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{45:[1,171]},{27:134,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83,92:172},{32:$V_,63:[1,173]},o($V$,[2,99],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU}),{29:177,36:[1,176],56:175,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{27:97,33:$Vo,35:$Vp,36:[1,179],58:178,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{95:$V01},{28:[1,181]},{8:[2,24],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{27:183,33:$Vo,35:$Vp,60:[1,182],62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{63:[1,184]},o($V11,[2,64]),{8:[2,56]},{27:185,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{37:[1,186]},{37:[1,187]},{37:[1,188]},{50:[1,189]},{27:190,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{8:$VG,31:$VH,32:$Vl},o($V21,[2,67],{66:$VK,67:$VL,68:$VM}),o($V21,[2,68],{66:$VK,67:$VL,68:$VM}),o($VV,[2,69]),o($VV,[2,70]),o($VV,[2,71]),o($V31,[2,74],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM}),o($V31,[2,75],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM}),o($V31,[2,76],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM}),o($V31,[2,77],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM}),o($V31,[2,78],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM}),o($V31,[2,79],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM}),o([8,26,32,36,45,63,76],[2,80],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,77:$VU}),o($VZ,[2,81],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS}),{32:[1,191],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},o($VV,[2,83],{91:[1,192]}),{27:193,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{45:[1,194]},{36:[1,195],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{36:[1,196],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{36:[1,197],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{89:$V41},{32:$V_,63:[1,199]},o($V51,[2,101]),{27:200,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{32:[1,202],36:[1,201]},{37:[1,203]},{33:[1,204]},{32:$VX,36:[1,205]},{8:[2,55]},o($VE,[2,104]),{8:[2,23]},{29:206,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{8:[2,61],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},o($V11,[2,63]),o($VY,[2,58],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU}),{2:$V0,4:207,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{41:208,43:209,44:$V61},{2:$V0,4:211,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{35:[1,212]},{8:[1,213],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{27:214,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{27:215,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},o($VV,[2,84]),{89:$V41,95:$V01},o($VV,[2,92]),o($VV,[2,93]),o($VV,[2,94]),{35:[1,216]},o($V51,[2,100]),o($V$,[2,98],{64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU}),{37:[1,217]},{29:218,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{2:$V0,4:219,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},o($VY,[2,53]),{8:[2,54]},{27:220,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,38:[1,221],40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{42:222,43:223,44:$V61,46:[1,224]},o($V71,[2,35]),{27:225,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,38:[1,226],40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{27:227,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{10:231,12:229,13:230,30:232,33:$V2,49:228},{36:[1,233],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{45:[1,234],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{27:235,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{2:$V0,4:236,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{33:[1,237]},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,38:[1,238],40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{8:[2,60],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},o($Vi,[2,30],{39:[1,239]}),{38:[1,240]},o($V71,[2,34]),{45:[1,241]},{45:[1,242],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},o($Vi,[2,44]),{36:[1,243],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{36:[1,244]},{36:[2,41]},{36:[2,42]},{36:[2,43]},{31:$Vk,32:$Vl,36:$Vj,64:$Vm,65:$Vn},o($VV,[2,73]),{27:245,33:$Vo,35:$Vp,62:$Vq,65:$Vr,69:$Vs,78:$Vt,79:$Vu,80:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:$VC,88:$VD,90:83},{36:[1,246],64:$VI,65:$VJ,66:$VK,67:$VL,68:$VM,70:$VN,71:$VO,72:$VP,73:$VQ,74:$VR,75:$VS,76:$VT,77:$VU},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,38:[1,247],40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},o($VY,[2,52]),o($Vi,[2,51]),{14:248,34:$V3,37:[1,249]},o($Vi,[2,33]),{2:$V0,4:250,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{2:$V0,4:251,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},o($Vi,[2,45]),{37:[1,252]},o($VV,[2,97]),o($VV,[2,95]),o($Vi,[2,50]),o($Vi,[2,31]),{2:$V0,4:253,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,38:[2,37],40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},o($V71,[2,36],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,29:23,30:24,6:42,2:$V0,25:$V1,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh}),{2:$V0,4:254,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,38:[1,255],40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},{2:$V0,6:42,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,30:24,33:$V2,34:$V3,38:[1,256],40:$V4,47:$V5,50:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,57:$Vc,88:$Vd,93:$Ve,94:$Vf,96:$Vg,97:$Vh},o($Vi,[2,32]),o($Vi,[2,38])],
defaultActions: {41:[2,1],96:[2,57],104:[2,39],105:[2,40],143:[2,56],179:[2,55],181:[2,23],205:[2,54],229:[2,41],230:[2,42],231:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


    let errores = [];

    const Errores = require('./exceptions/Errors');

    const TypeD = require('./symbols/TypeD');

    const Aritmeticas = require('./expressions/Aritmeticas');
    const Nativo = require('./expressions/Nativo');
    const AccessVar = require('./expressions/AccessVar');
    const Relacionales = require('./expressions/Relacionales');
    const Logicas = require('./expressions/Logicas');

    const Cout = require('./instructions/Cout');
    const AssigneVar = require('./instructions/AssigneVar');
    const Declaration = require('./instructions/Declaration');
    const AssigneArr = require('./instructions/AssigneArr');
    const DeclarationArr = require('./instructions/DeclarationArr');
    const Casts = require('./instructions/Casts');
    const ToLower = require('./instructions/ToLower');
    const ToUpper = require('./instructions/ToUpper');
    const Round = require('./instructions/Round');
    const ToString = require('./instructions/ToString');
    const If = require('./instructions/If');
    const For = require('./instructions/For')
    const While = require('./instructions/While')
    const DoWhile = require('./instructions/DoWhile')
    const Break = require('./instructions/Break');
    const Return = require('./instructions/Return');
    const Continue = require('./instructions/Continue');
    const Increment = require('./instructions/Increment');
    const Decrement = require('./instructions/Decrement');
    const Ternary = require('./instructions/Ternary');
    const Switch = require('./instructions/Switch');
    const Case = require('./instructions/Case');
    const Default = require('./instructions/Default');
    const Execute = require('./instructions/Execute');
    const Method = require('./instructions/Method');
    const Functions = require('./instructions/Functions');
    const Call = require('./instructions/Call');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:return  'INT_TYPE'
break;
case 3:return  'DOUBLE_TYPE'
break;
case 4:return  'CHAR_TYPE'
break;
case 5:return  'STRING_TYPE'
break;
case 6:return  'BOOL_TYPE'
break;
case 7:return  'VOID_TYPE'
break;
case 8:return  'POW'
break;
case 9:return  'COUT'
break;
case 10:return  'NEW'
break;
case 11:return  'STD'
break;
case 12:return  'ENDL'
break;
case 13:return  'IF'
break;
case 14:return  'ELSE'
break;
case 15:return  'SWITCH'
break;
case 16:return  'CASE'
break;
case 17:return  'DEFAULT'
break;
case 18:return  'WHILE'
break;
case 19:return  'DO'
break;
case 20:return  'FOR'
break;
case 21:return  'BREAK'
break;
case 22:return  'CONTINUE'
break;
case 23:return  'RETURN'
break;
case 24:return  'VOID'
break;
case 25:return  'TOLOWER'
break;
case 26:return  'TOUPPER'
break;
case 27:return  'ROUND'
break;
case 28:return  'LENGTH'
break;
case 29:return  'TYPEOF'
break;
case 30:return  'TOSTRING'
break;
case 31:return  'C_STR'
break;
case 32:return  'EXECUTE'
break;
case 33:return  "DOUBLE_QUOTE"
break;
case 34:return  "PLUS"
break;
case 35:return  "MINUS"
break;
case 36:return  "TIMES"
break;
case 37:return  "DIVIDE"
break;
case 38:return  "MOD"
break;
case 39:return  "EQUALS"
break;
case 40:return  "DIFFERENT"
break;
case 41:return  "LESS_EQUAL"
break;
case 42:return  "LESS"
break;
case 43:return  "GREATER_EQUAL"
break;
case 44:return  "GREATER"
break;
case 45:return  "OR"
break;
case 46:return  "AND"
break;
case 47:return  "NOT"
break;
case 48:return  "INTERROGATION"
break;
case 49:return  "COLON"
break;
case 50:return  "SEMICOLON"
break;
case 51:return  "COMMA"
break;
case 52:return  "LPAREN"
break;
case 53:return  "RPAREN"
break;
case 54:return  "LBRACE"
break;
case 55:return  "RBRACE"
break;
case 56:return  "LBRACKET"
break;
case 57:return  "RBRACKET"
break;
case 58:return  "ASSIGN"
break;
case 59:return  "FLOAT"
break;
case 60:return  "INTEGER"
break;
case 61:return  "TRUE"
break;
case 62:return  "FALSE"
break;
case 63:return  "ID"
break;
case 64:return  "CHAR"
break;
case 65:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 81
break;
case 66:/* ignore */    {}
break;
case 67:/* ignore */    {}
break;
case 68:return "EOF"
break;
case 69: errores.push(new Errores.default('Léxico', 'Caracter no valido: ' + yy_.yytext, yy_.yylineno, yy_.yyleng)); 
break;
case 70:


break;
}
},
rules: [/^(?:\s+\/\/[^\r\n]*[\r|\n|\r\n]?)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:void\b)/i,/^(?:pow\b)/i,/^(?:cout\b)/i,/^(?:new\b)/i,/^(?:std\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:<<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:()?[0-9]+\.[0-9]+)/i,/^(?:()?[0-9]+)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[a-z][a-z0-9_]*)/i,/^(?:[\'][^\'][\'])/i,/^(?:[\"][^\"]*[\"])/i,/^(?:[\ \r\t\f\t]+)/i,/^(?:[\ \n])/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}