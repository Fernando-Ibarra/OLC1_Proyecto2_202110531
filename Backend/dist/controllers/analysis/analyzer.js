/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,32],$V2=[1,20],$V3=[1,23],$V4=[1,21],$V5=[1,22],$V6=[1,24],$V7=[1,25],$V8=[1,26],$V9=[1,29],$Va=[1,27],$Vb=[1,28],$Vc=[1,30],$Vd=[1,31],$Ve=[5,21,29,30,34,36,39,40,41,42,43,73,79,80,82,83],$Vf=[8,32],$Vg=[2,22],$Vh=[1,43],$Vi=[1,46],$Vj=[1,65],$Vk=[1,58],$Vl=[1,71],$Vm=[1,55],$Vn=[1,56],$Vo=[1,57],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,66],$Vw=[1,67],$Vx=[1,68],$Vy=[1,69],$Vz=[29,31,32,47,50,54,63,64,65,66,67,68,69,70,71,72,73],$VA=[8,27,28,32,47,49,50],$VB=[2,20],$VC=[1,74],$VD=[1,90],$VE=[1,91],$VF=[1,92],$VG=[1,93],$VH=[1,94],$VI=[1,95],$VJ=[1,96],$VK=[1,97],$VL=[1,98],$VM=[1,99],$VN=[1,100],$VO=[1,101],$VP=[1,102],$VQ=[8,22,28,32,48,49,50,51,52,53,55,56,57,58,59,60,61,62,74],$VR=[1,150],$VS=[28,48],$VT=[1,151],$VU=[27,47],$VV=[8,22,28,32,48,49,50,55,56,57,58,59,60,61,62,74],$VW=[8,22,28,32,48,55,56,57,58,59,60,61,62,74],$VX=[1,167],$VY=[8,22,28,32,47,48,49,50,51,52,53,55,56,57,58,59,60,61,62,74];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"PRINT":7,"SEMICOLON":8,"DECLARATION":9,"ASSINGNEW":10,"ARRAY":11,"INCREMENT":12,"DECREMENT":13,"IF_S":14,"WHILE_S":15,"DoWhile":16,"FOR_S":17,"BREAK_S":18,"CONTINUE_S":19,"RETURN_S":20,"COUT":21,"DOUBLE_QUOTE":22,"EXPRESSION":23,"ENDL":24,"TYPES":25,"IDS":26,"ASSIGN":27,"COMMA":28,"ID":29,"IF":30,"LPAREN":31,"RPAREN":32,"LBRACE":33,"RBRACE":34,"ELSE":35,"FOR":36,"FOR_S_DE":37,"FOR_S_UPD":38,"WHILE":39,"DO":40,"BREAK":41,"CONTINUE":42,"RETURN":43,"ARRAYBRACKET":44,"NEW":45,"ASSINGARRAY":46,"LBRACKET":47,"RBRACKET":48,"PLUS":49,"MINUS":50,"TIMES":51,"DIVIDE":52,"MOD":53,"POW":54,"EQUALS":55,"DIFFERENT":56,"LESS":57,"GREATER":58,"LESS_EQUAL":59,"GREATER_EQUAL":60,"OR":61,"AND":62,"NOT":63,"INTEGER":64,"FLOAT":65,"STRING":66,"TRUE":67,"FALSE":68,"CHAR":69,"TOLOWER":70,"TOUPPER":71,"ROUND":72,"STD":73,"COLON":74,"TOSTRING":75,"LISTF":76,"INTERROGATION":77,"LIST":78,"INT_TYPE":79,"DOUBLE_TYPE":80,"STRING_TYPE":81,"CHAR_TYPE":82,"BOOL_TYPE":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SEMICOLON",21:"COUT",22:"DOUBLE_QUOTE",24:"ENDL",27:"ASSIGN",28:"COMMA",29:"ID",30:"IF",31:"LPAREN",32:"RPAREN",33:"LBRACE",34:"RBRACE",35:"ELSE",36:"FOR",39:"WHILE",40:"DO",41:"BREAK",42:"CONTINUE",43:"RETURN",45:"NEW",47:"LBRACKET",48:"RBRACKET",49:"PLUS",50:"MINUS",51:"TIMES",52:"DIVIDE",53:"MOD",54:"POW",55:"EQUALS",56:"DIFFERENT",57:"LESS",58:"GREATER",59:"LESS_EQUAL",60:"GREATER_EQUAL",61:"OR",62:"AND",63:"NOT",64:"INTEGER",65:"FLOAT",66:"STRING",67:"TRUE",68:"FALSE",69:"CHAR",70:"TOLOWER",71:"TOUPPER",72:"ROUND",73:"STD",74:"COLON",75:"TOSTRING",77:"INTERROGATION",79:"INT_TYPE",80:"DOUBLE_TYPE",81:"STRING_TYPE",82:"CHAR_TYPE",83:"BOOL_TYPE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[7,5],[9,4],[9,2],[10,3],[10,1],[26,3],[26,1],[14,7],[14,11],[14,9],[17,11],[37,1],[37,1],[38,1],[38,1],[38,1],[15,7],[16,8],[18,2],[19,2],[20,2],[20,3],[11,7],[11,5],[46,2],[44,3],[44,2],[12,3],[13,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,6],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,3],[23,2],[23,3],[23,4],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,1],[23,4],[23,4],[23,4],[23,7],[23,1],[23,7],[78,3],[78,1],[76,4],[76,3],[25,1],[25,1],[25,4],[25,1],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$= $$[$0-1]; 
break;
case 3: case 24: case 79:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 63:
 this.$ = $$[$0-1]; 
break;
case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 29: case 30: case 31: case 32: case 33: case 76:
 this.$ = $$[$0]; 
break;
case 17:
 this.$ = new Cout.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 18:
 this.$ = new Cout.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column, true); 
break;
case 19:
 this.$ = new Declaration.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 20:
 this.$ = new Declaration.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 21:
 this.$ = new AssigneVar.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0]); 
break;
case 22:
 this.$ = new AssigneVar.default($$[$0], _$[$0].first_line, _$[$0].first_column, $$[$02]); 
break;
case 23:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 25:
 this.$ = new If.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column, false); 
break;
case 26:
 this.$ = new If.default($$[$0-8], $$[$0-5], _$[$0-10].first_line, _$[$0-10].first_column, true, $$[$0-1]); 
break;
case 27:
 this.$ = new If.default($$[$0-6], $$[$0-3], _$[$0-8].first_line, _$[$0-8].first_column, false); 
break;
case 28:
 this.$ = new For.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 34:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 35:
 this.$ = new DoWhile.default($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 36:
 this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 37:
 this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 38:
 this.$ = new Return.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 39:
 this.$ = new Return.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 40:
 this.$ = new DeclarationArr.default($$[$0-6], $$[$0-5], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 41:
 this.$ = new DeclarationArr.default($$[$0-4], $$[$0-3], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 42:
 this.$ = new AssigneArr.default($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 43:
 this.$ = $$[$0-2]; 
break;
case 44:
 this.$ = []; 
break;
case 45:
 this.$ = new Increment.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 46:
 this.$ = new Decrement.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 47:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.PLUS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 48:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.MINUS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 49:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.TIMES, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 50:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 51:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.MOD, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 52:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.NEGATIVE, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 53:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.POWER, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 54:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.EQUALS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 55:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.DIFFERENT, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 56:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 57:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.GREATER, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 58:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.LESS_EQUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 59:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.GREATER_EQUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 60:
 this.$ = new Logicas.default(Logicas.LogicasOption.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 61:
 this.$ = new Logicas.default(Logicas.LogicasOption.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 62:
 this.$ = new Logicas.default(Logicas.LogicasOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 64:
 this.$ = new Casts.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 65:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.INT), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 66:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.FLOAT), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 67:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 68: case 69:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.BOOL), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 70:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.CHAR), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 71:
 this.$ = new AccessVar.default($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 72:
 this.$ = new ToLower.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 73:
 this.$ = new ToUpper.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 74:
 this.$ = new Round.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 75:
 this.$ = new ToString.default($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 77:
 this.$ = new Ternary.default($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 78:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 80:
 $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 81:
 this.$ = [$$[$0-1]]; 
break;
case 82:
this.$ = new TypeD.default(TypeD.typeData.INT);
break;
case 83:
this.$ = new TypeD.default(TypeD.typeData.FLOAT);
break;
case 84:
this.$ = new TypeD.default(TypeD.typeData.STRING);
break;
case 85:
this.$ = new TypeD.default(TypeD.typeData.CHAR);
break;
case 86:
this.$ = new TypeD.default(TypeD.typeData.BOOL);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{1:[3]},{5:[1,33],6:34,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},o($Ve,[2,3]),{8:[1,35]},{8:[1,36]},{8:[1,37]},{8:[1,38]},{8:[1,39]},{8:[1,40]},o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),o($Ve,[2,14]),o($Ve,[2,15]),o($Ve,[2,16]),{22:[1,41]},{26:42,29:$V1},o($Vf,$Vg,{27:$Vh,28:$Vi,49:[1,44],50:[1,45]}),{31:[1,47]},{31:[1,48]},{33:[1,49]},{31:[1,50]},{8:[1,51]},{8:[1,52]},{8:[1,53],23:54,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},o($Vz,[2,82]),o($Vz,[2,83]),{74:[1,72]},o($Vz,[2,85]),o($Vz,[2,86]),o($VA,[2,24]),{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,4]),o($Ve,[2,5]),o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),{23:73,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{8:$VB,27:$VC,28:$Vi,44:75,47:[1,76]},{23:77,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{49:[1,78]},{50:[1,79]},{29:[1,80]},{23:81,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:82,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{4:83,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{9:85,10:86,25:87,26:88,29:$V1,37:84,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},o($Ve,[2,36]),o($Ve,[2,37]),o($Ve,[2,38]),{8:[1,89],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{23:103,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{31:[1,104]},{23:105,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:106,25:107,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:[1,108],76:70,79:$Va,80:$Vb,82:$Vc,83:$Vd},o($VQ,[2,65]),o($VQ,[2,66]),o($VQ,[2,67]),o($VQ,[2,68]),o($VQ,[2,69]),o($VQ,[2,70]),o($VQ,[2,71]),{31:[1,109]},{31:[1,110]},{31:[1,111]},{74:[1,112]},o($VQ,[2,76],{47:[1,113]}),{23:115,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70,78:114},{74:[1,116]},{8:[2,17],22:[1,117],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{23:118,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{27:[1,119],47:[1,120]},{48:[1,121]},o($Vf,[2,21],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP}),o($Vf,[2,45]),o($Vf,[2,46]),o($VA,[2,23]),{32:[1,122],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{32:[1,123],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{6:34,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,34:[1,124],36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{8:[1,125]},{8:[2,29]},{8:[2,30]},{26:126,29:$V1},{8:$Vg,27:$Vh,28:$Vi},o($Ve,[2,39]),{23:127,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:128,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:129,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:130,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:131,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:132,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:133,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:134,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:135,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:136,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:137,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:138,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:139,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},o($VQ,[2,52]),{23:140,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},o($VQ,[2,62]),{32:[1,141],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{32:[1,142]},{74:[1,143]},{23:144,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:145,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:146,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{74:[1,147]},{23:115,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70,78:148},{28:$VR,48:[1,149]},o($VS,[2,79],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP}),{81:$VT},{24:[1,152]},{8:[2,19],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{23:154,29:$Vj,31:$Vk,45:[1,153],47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{48:[1,155]},o($VU,[2,44]),{33:[1,156]},{33:[1,157]},{39:[1,158]},{23:159,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{8:$VB,27:$VC,28:$Vi},o($VV,[2,47],{51:$VF,52:$VG,53:$VH}),o($VV,[2,48],{51:$VF,52:$VG,53:$VH}),o($VQ,[2,49]),o($VQ,[2,50]),o($VQ,[2,51]),o($VW,[2,54],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH}),o($VW,[2,55],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH}),o($VW,[2,56],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH}),o($VW,[2,57],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH}),o($VW,[2,58],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH}),o($VW,[2,59],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH}),o([8,22,28,32,48,61,74],[2,60],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,62:$VP}),o([8,22,28,32,48,61,62,74],[2,61],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN}),{28:[1,160],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},o($VQ,[2,63],{77:[1,161]}),{23:162,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{74:[1,163]},{32:[1,164],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{32:[1,165],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{32:[1,166],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{75:$VX},{28:$VR,48:[1,168]},o($VY,[2,81]),{23:169,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},o($Vz,[2,84]),{8:[2,18]},{25:170,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{8:[2,41],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},o($VU,[2,43]),{4:171,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{4:172,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{31:[1,173]},{8:[1,174],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{23:175,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{23:176,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},o($VQ,[2,64]),{75:$VX,81:$VT},o($VQ,[2,72]),o($VQ,[2,73]),o($VQ,[2,74]),{31:[1,177]},o($VY,[2,80]),o($VS,[2,78],{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP}),{23:178,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{6:34,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,34:[1,179],36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{6:34,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,34:[1,180],36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{23:181,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{10:185,12:183,13:184,26:19,29:$V1,38:182},{32:[1,186],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP,74:[1,187]},{23:188,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{8:[2,40],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},o($Ve,[2,25],{35:[1,189]}),o($Ve,[2,34]),{32:[1,190],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{32:[1,191]},{32:[2,31]},{32:[2,32]},{32:[2,33]},o($VQ,[2,53]),{23:192,29:$Vj,31:$Vk,47:$Vl,50:$Vm,54:$Vn,63:$Vo,64:$Vp,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,71:$Vw,72:$Vx,73:$Vy,76:70},{32:[1,193],49:$VD,50:$VE,51:$VF,52:$VG,53:$VH,55:$VI,56:$VJ,57:$VK,58:$VL,59:$VM,60:$VN,61:$VO,62:$VP},{14:195,30:$V2,33:[1,194]},o($Ve,[2,35]),{33:[1,196]},o($VQ,[2,77]),o($VQ,[2,75]),{4:197,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},o($Ve,[2,27]),{4:198,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{6:34,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,34:[1,199],36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},{6:34,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,25:18,26:19,29:$V1,30:$V2,34:[1,200],36:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,73:$V9,79:$Va,80:$Vb,82:$Vc,83:$Vd},o($Ve,[2,26]),o($Ve,[2,28])],
defaultActions: {33:[2,1],85:[2,29],86:[2,30],152:[2,18],183:[2,31],184:[2,32],185:[2,33]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TypeD = require('./symbols/TypeD');

    const Aritmeticas = require('./expressions/Aritmeticas');
    const Nativo = require('./expressions/Nativo');
    const AccessVar = require('./expressions/AccessVar');
    const Relacionales = require('./expressions/Relacionales');
    const Logicas = require('./expressions/Logicas');

    const Cout = require('./instructions/Cout');
    const AssigneVar = require('./instructions/AssigneVar');
    const Declaration = require('./instructions/Declaration');
    const AssigneArr = require('./instructions/AssigneArr');
    const DeclarationArr = require('./instructions/DeclarationArr');
    const Casts = require('./instructions/Casts');
    const ToLower = require('./instructions/ToLower');
    const ToUpper = require('./instructions/ToUpper');
    const Round = require('./instructions/Round');
    const ToString = require('./instructions/ToString');
    const If = require('./instructions/If');
    const For = require('./instructions/For')
    const While = require('./instructions/While')
    const DoWhile = require('./instructions/DoWhile')
    const Break = require('./instructions/Break');
    const Return = require('./instructions/Return');
    const Continue = require('./instructions/Continue');
    const Increment = require('./instructions/Increment');
    const Decrement = require('./instructions/Decrement');
    const Ternary = require('./instructions/Ternary');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */    {}
break;
case 1:/* ignore */    {}
break;
case 2:return  'INT_TYPE'
break;
case 3:return  'DOUBLE_TYPE'
break;
case 4:return  'CHAR_TYPE'
break;
case 5:return  'STRING_TYPE'
break;
case 6:return  'BOOL_TYPE'
break;
case 7:return  'POW'
break;
case 8:return  'COUT'
break;
case 9:return  'NEW'
break;
case 10:return  'STD'
break;
case 11:return  'ENDL'
break;
case 12:return  'IF'
break;
case 13:return  'ELSE'
break;
case 14:return  'SWITCH'
break;
case 15:return  'CASE'
break;
case 16:return  'WHILE'
break;
case 17:return  'DO'
break;
case 18:return  'FOR'
break;
case 19:return  'BREAK'
break;
case 20:return  'CONTINUE'
break;
case 21:return  'RETURN'
break;
case 22:return  'VOID'
break;
case 23:return  'TOLOWER'
break;
case 24:return  'TOUPPER'
break;
case 25:return  'ROUND'
break;
case 26:return  'LENGTH'
break;
case 27:return  'TYPEOF'
break;
case 28:return  'TOSTRING'
break;
case 29:return  'C_STR'
break;
case 30:return  'EXECUTE'
break;
case 31:return  "DOUBLE_QUOTE"
break;
case 32:return  "PLUS"
break;
case 33:return  "MINUS"
break;
case 34:return  "TIMES"
break;
case 35:return  "DIVIDE"
break;
case 36:return  "MOD"
break;
case 37:return  "EQUALS"
break;
case 38:return  "DIFFERENT"
break;
case 39:return  "LESS_EQUAL"
break;
case 40:return  "LESS"
break;
case 41:return  "GREATER_EQUAL"
break;
case 42:return  "GREATER"
break;
case 43:return  "OR"
break;
case 44:return  "AND"
break;
case 45:return  "NOT"
break;
case 46:return  "INTERROGATION"
break;
case 47:return  "COLON"
break;
case 48:return  "SEMICOLON"
break;
case 49:return  "COMMA"
break;
case 50:return  "LPAREN"
break;
case 51:return  "RPAREN"
break;
case 52:return  "LBRACE"
break;
case 53:return  "RBRACE"
break;
case 54:return  "LBRACKET"
break;
case 55:return  "RBRACKET"
break;
case 56:return  "ASSIGN"
break;
case 57:return  "FLOAT"
break;
case 58:return  "INTEGER"
break;
case 59:return  "TRUE"
break;
case 60:return  "FALSE"
break;
case 61:return  "ID"
break;
case 62:return  "CHAR"
break;
case 63:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 66
break;
case 64:/* ignore */    {}
break;
case 65:/* ignore */    {}
break;
case 66:return "EOF"
break;
case 67:return "UNEXPECTED_TOKEN"
break;
case 68:


break;
}
},
rules: [/^(?:[/][/].*[\n])/i,/^(?:[/][*][^*]*[*]+([^*/][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:pow\b)/i,/^(?:cout\b)/i,/^(?:new\b)/i,/^(?:std\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:<<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:()?[0-9]+\.[0-9]+)/i,/^(?:()?[0-9]+)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[a-z][a-z0-9_]*)/i,/^(?:[\'][^\'][\'])/i,/^(?:[\"][^\"]*[\"])/i,/^(?:[\ \r\t\f\t]+)/i,/^(?:[\ \n])/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}