/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,19],$V2=[1,35],$V3=[1,22],$V4=[1,23],$V5=[1,26],$V6=[1,24],$V7=[1,25],$V8=[1,27],$V9=[1,28],$Va=[1,29],$Vb=[1,32],$Vc=[1,30],$Vd=[1,31],$Ve=[1,33],$Vf=[1,34],$Vg=[2,5,22,30,31,35,37,41,43,44,47,48,49,50,51,81,86,87,89,90],$Vh=[8,33],$Vi=[2,24],$Vj=[1,47],$Vk=[1,50],$Vl=[1,70],$Vm=[1,63],$Vn=[1,76],$Vo=[1,60],$Vp=[1,61],$Vq=[1,62],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,67],$Vv=[1,68],$Vw=[1,69],$Vx=[1,71],$Vy=[1,72],$Vz=[1,73],$VA=[1,74],$VB=[30,32,33,55,58,62,71,72,73,74,75,76,77,78,79,80,81],$VC=[8,28,29,33,55,57,58],$VD=[2,22],$VE=[1,79],$VF=[1,96],$VG=[1,97],$VH=[1,98],$VI=[1,99],$VJ=[1,100],$VK=[1,101],$VL=[1,102],$VM=[1,103],$VN=[1,104],$VO=[1,105],$VP=[1,106],$VQ=[1,107],$VR=[1,108],$VS=[8,23,29,33,42,56,57,58,59,60,61,63,64,65,66,67,68,69,70],$VT=[1,157],$VU=[29,56],$VV=[1,158],$VW=[28,55],$VX=[8,23,29,33,42,56,57,58,63,64,65,66,67,68,69,70],$VY=[8,23,29,33,42,56,63,64,65,66,67,68,69,70],$VZ=[1,175],$V_=[8,23,29,33,42,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70],$V$=[1,182],$V01=[41,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"PRINT":7,"SEMICOLON":8,"DECLARATION":9,"ASSINGNEW":10,"ARRAY":11,"INCREMENT":12,"DECREMENT":13,"IF_S":14,"SWITCH_S":15,"WHILE_S":16,"DoWhile":17,"FOR_S":18,"BREAK_S":19,"CONTINUE_S":20,"RETURN_S":21,"COUT":22,"DOUBLE_QUOTE":23,"EXPRESSION":24,"ENDL":25,"TYPES":26,"IDS":27,"ASSIGN":28,"COMMA":29,"ID":30,"IF":31,"LPAREN":32,"RPAREN":33,"LBRACE":34,"RBRACE":35,"ELSE":36,"SWITCH":37,"CASELIST":38,"DEFAULT_S":39,"CASE_S":40,"CASE":41,"COLON":42,"DEFAULT":43,"FOR":44,"FOR_S_DE":45,"FOR_S_UPD":46,"WHILE":47,"DO":48,"BREAK":49,"CONTINUE":50,"RETURN":51,"ARRAYBRACKET":52,"NEW":53,"ASSINGARRAY":54,"LBRACKET":55,"RBRACKET":56,"PLUS":57,"MINUS":58,"TIMES":59,"DIVIDE":60,"MOD":61,"POW":62,"EQUALS":63,"DIFFERENT":64,"LESS":65,"GREATER":66,"LESS_EQUAL":67,"GREATER_EQUAL":68,"OR":69,"AND":70,"NOT":71,"INTEGER":72,"FLOAT":73,"STRING":74,"TRUE":75,"FALSE":76,"CHAR":77,"TOLOWER":78,"TOUPPER":79,"ROUND":80,"STD":81,"TOSTRING":82,"LISTF":83,"INTERROGATION":84,"LIST":85,"INT_TYPE":86,"DOUBLE_TYPE":87,"STRING_TYPE":88,"CHAR_TYPE":89,"BOOL_TYPE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SEMICOLON",22:"COUT",23:"DOUBLE_QUOTE",25:"ENDL",28:"ASSIGN",29:"COMMA",30:"ID",31:"IF",32:"LPAREN",33:"RPAREN",34:"LBRACE",35:"RBRACE",36:"ELSE",37:"SWITCH",41:"CASE",42:"COLON",43:"DEFAULT",44:"FOR",47:"WHILE",48:"DO",49:"BREAK",50:"CONTINUE",51:"RETURN",53:"NEW",55:"LBRACKET",56:"RBRACKET",57:"PLUS",58:"MINUS",59:"TIMES",60:"DIVIDE",61:"MOD",62:"POW",63:"EQUALS",64:"DIFFERENT",65:"LESS",66:"GREATER",67:"LESS_EQUAL",68:"GREATER_EQUAL",69:"OR",70:"AND",71:"NOT",72:"INTEGER",73:"FLOAT",74:"STRING",75:"TRUE",76:"FALSE",77:"CHAR",78:"TOLOWER",79:"TOUPPER",80:"ROUND",81:"STD",82:"TOSTRING",84:"INTERROGATION",86:"INT_TYPE",87:"DOUBLE_TYPE",88:"STRING_TYPE",89:"CHAR_TYPE",90:"BOOL_TYPE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,3],[7,5],[9,4],[9,2],[10,3],[10,1],[27,3],[27,1],[14,7],[14,9],[14,11],[15,8],[38,2],[38,1],[40,4],[39,3],[18,11],[45,1],[45,1],[46,1],[46,1],[46,1],[16,7],[17,8],[19,2],[20,2],[21,2],[21,3],[11,7],[11,5],[54,2],[52,3],[52,2],[12,3],[13,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,6],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,4],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,4],[24,4],[24,4],[24,7],[24,1],[24,7],[85,3],[85,1],[83,4],[83,3],[26,1],[26,1],[26,4],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$= $$[$0-1]; 
break;
case 3: case 26: case 32: case 86:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 70:
 this.$ = $$[$0-1]; 
break;
case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 36: case 37: case 38: case 39: case 40: case 83:
 this.$ = $$[$0]; 
break;
case 18:
 errores.push(new Errores.default('Sintáctico', 'Error en la definición de instrucción', _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 19:
 this.$ = new Cout.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 20:
 this.$ = new Cout.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column, true); 
break;
case 21:
 this.$ = new Declaration.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 22:
 this.$ = new Declaration.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 23:
 this.$ = new AssigneVar.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0]); 
break;
case 24:
 this.$ = new AssigneVar.default($$[$0], _$[$0].first_line, _$[$0].first_column, $$[$02]); 
break;
case 25:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 27:
 this.$ = new If.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column, false); 
break;
case 28:
 this.$ = new If.default($$[$0-6], $$[$0-3], _$[$0-8].first_line, _$[$0-8].first_column, true, $$[$0]); 
break;
case 29:
 this.$ = new If.default($$[$0-8], $$[$0-5], _$[$0-10].first_line, _$[$0-10].first_column, true, $$[$0-1]); 
break;
case 30:
 this.$ = new Switch.default($$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column, $$[$0-2], $$[$0-1]); 
break;
case 31:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 33:
 this.$ = new Case.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 34:
 this.$ = new Default.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 35:
 this.$ = new For.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 41:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 42:
 this.$ = new DoWhile.default($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 43:
 this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 44:
 this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 45:
 this.$ = new Return.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 46:
 this.$ = new Return.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 47:
 this.$ = new DeclarationArr.default($$[$0-6], $$[$0-5], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 48:
 this.$ = new DeclarationArr.default($$[$0-4], $$[$0-3], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 49:
 this.$ = new AssigneArr.default($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 50:
 this.$ = $$[$0-2]; 
break;
case 51:
 this.$ = []; 
break;
case 52:
 this.$ = new Increment.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 53:
 this.$ = new Decrement.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 54:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.PLUS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 55:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.MINUS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 56:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.TIMES, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 57:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 58:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.MOD, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 59:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.NEGATIVE, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 60:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.POWER, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 61:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.EQUALS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 62:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.DIFFERENT, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 63:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 64:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.GREATER, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 65:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.LESS_EQUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 66:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.GREATER_EQUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 67:
 this.$ = new Logicas.default(Logicas.LogicasOption.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 68:
 this.$ = new Logicas.default(Logicas.LogicasOption.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 69:
 this.$ = new Logicas.default(Logicas.LogicasOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 71:
 this.$ = new Casts.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 72:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.INT), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 73:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.FLOAT), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 74:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 75: case 76:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.BOOL), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 77:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.CHAR), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 78:
 this.$ = new AccessVar.default($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 79:
 this.$ = new ToLower.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 80:
 this.$ = new ToUpper.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 81:
 this.$ = new Round.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 82:
 this.$ = new ToString.default($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 84:
 this.$ = new Ternary.default($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 85:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 87:
 $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 88:
 this.$ = [$$[$0-1]]; 
break;
case 89:
this.$ = new TypeD.default(TypeD.typeData.INT);
break;
case 90:
this.$ = new TypeD.default(TypeD.typeData.FLOAT);
break;
case 91:
this.$ = new TypeD.default(TypeD.typeData.STRING);
break;
case 92:
this.$ = new TypeD.default(TypeD.typeData.CHAR);
break;
case 93:
this.$ = new TypeD.default(TypeD.typeData.BOOL);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{1:[3]},{2:$V0,5:[1,36],6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},o($Vg,[2,3]),{8:[1,38]},{8:[1,39]},{8:[1,40]},{8:[1,41]},{8:[1,42]},{8:[1,43]},o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),o($Vg,[2,17]),{2:$V0,6:44,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{23:[1,45]},{27:46,30:$V2},o($Vh,$Vi,{28:$Vj,29:$Vk,57:[1,48],58:[1,49]}),{32:[1,51]},{32:[1,52]},{32:[1,53]},{34:[1,54]},{32:[1,55]},{8:[1,56]},{8:[1,57]},{8:[1,58],24:59,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},o($VB,[2,89]),o($VB,[2,90]),{42:[1,77]},o($VB,[2,92]),o($VB,[2,93]),o($VC,[2,26]),{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,4]),o($Vg,[2,5]),o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,18]),{24:78,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{8:$VD,28:$VE,29:$Vk,52:80,55:[1,81]},{24:82,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{57:[1,83]},{58:[1,84]},{30:[1,85]},{24:86,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:87,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:88,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{2:$V0,4:89,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{9:91,10:92,26:93,27:94,30:$V2,45:90,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},o($Vg,[2,43]),o($Vg,[2,44]),o($Vg,[2,45]),{8:[1,95],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{24:109,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{32:[1,110]},{24:111,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:112,26:113,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:[1,114],83:75,86:$Vc,87:$Vd,89:$Ve,90:$Vf},o($VS,[2,72]),o($VS,[2,73]),o($VS,[2,74]),o($VS,[2,75]),o($VS,[2,76]),o($VS,[2,77]),o($VS,[2,78]),{32:[1,115]},{32:[1,116]},{32:[1,117]},{42:[1,118]},o($VS,[2,83],{55:[1,119]}),{24:121,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75,85:120},{42:[1,122]},{8:[2,19],23:[1,123],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{24:124,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{28:[1,125],55:[1,126]},{56:[1,127]},o($Vh,[2,23],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR}),o($Vh,[2,52]),o($Vh,[2,53]),o($VC,[2,25]),{33:[1,128],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{33:[1,129],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{33:[1,130],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{2:$V0,6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,35:[1,131],37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{8:[1,132]},{8:[2,36]},{8:[2,37]},{27:133,30:$V2},{8:$Vi,28:$Vj,29:$Vk},o($Vg,[2,46]),{24:134,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:135,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:136,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:137,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:138,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:139,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:140,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:141,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:142,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:143,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:144,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:145,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:146,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},o($VS,[2,59]),{24:147,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},o($VS,[2,69]),{33:[1,148],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{33:[1,149]},{42:[1,150]},{24:151,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:152,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:153,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{42:[1,154]},{24:121,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75,85:155},{29:$VT,56:[1,156]},o($VU,[2,86],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR}),{88:$VV},{25:[1,159]},{8:[2,21],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{24:161,30:$Vl,32:$Vm,53:[1,160],55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{56:[1,162]},o($VW,[2,51]),{34:[1,163]},{34:[1,164]},{34:[1,165]},{47:[1,166]},{24:167,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{8:$VD,28:$VE,29:$Vk},o($VX,[2,54],{59:$VH,60:$VI,61:$VJ}),o($VX,[2,55],{59:$VH,60:$VI,61:$VJ}),o($VS,[2,56]),o($VS,[2,57]),o($VS,[2,58]),o($VY,[2,61],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ}),o($VY,[2,62],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ}),o($VY,[2,63],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ}),o($VY,[2,64],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ}),o($VY,[2,65],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ}),o($VY,[2,66],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ}),o([8,23,29,33,42,56,69],[2,67],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,70:$VR}),o([8,23,29,33,42,56,69,70],[2,68],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP}),{29:[1,168],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},o($VS,[2,70],{84:[1,169]}),{24:170,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{42:[1,171]},{33:[1,172],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{33:[1,173],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{33:[1,174],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{82:$VZ},{29:$VT,56:[1,176]},o($V_,[2,88]),{24:177,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},o($VB,[2,91]),{8:[2,20]},{26:178,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{8:[2,48],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},o($VW,[2,50]),{2:$V0,4:179,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{38:180,40:181,41:$V$},{2:$V0,4:183,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{32:[1,184]},{8:[1,185],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{24:186,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{24:187,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},o($VS,[2,71]),{82:$VZ,88:$VV},o($VS,[2,79]),o($VS,[2,80]),o($VS,[2,81]),{32:[1,188]},o($V_,[2,87]),o($VU,[2,85],{57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR}),{24:189,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{2:$V0,6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,35:[1,190],37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{39:191,40:192,41:$V$,43:[1,193]},o($V01,[2,32]),{24:194,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{2:$V0,6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,35:[1,195],37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{24:196,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{10:200,12:198,13:199,27:21,30:$V2,46:197},{33:[1,201],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{42:[1,202],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{24:203,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{8:[2,47],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},o($Vg,[2,27],{36:[1,204]}),{35:[1,205]},o($V01,[2,31]),{42:[1,206]},{42:[1,207],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},o($Vg,[2,41]),{33:[1,208],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{33:[1,209]},{33:[2,38]},{33:[2,39]},{33:[2,40]},o($VS,[2,60]),{24:210,30:$Vl,32:$Vm,55:$Vn,58:$Vo,62:$Vp,71:$Vq,72:$Vr,73:$Vs,74:$Vt,75:$Vu,76:$Vv,77:$Vw,78:$Vx,79:$Vy,80:$Vz,81:$VA,83:75},{33:[1,211],57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,63:$VK,64:$VL,65:$VM,66:$VN,67:$VO,68:$VP,69:$VQ,70:$VR},{14:212,31:$V3,34:[1,213]},o($Vg,[2,30]),{2:$V0,4:214,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{2:$V0,4:215,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},o($Vg,[2,42]),{34:[1,216]},o($VS,[2,84]),o($VS,[2,82]),o($Vg,[2,28]),{2:$V0,4:217,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{2:$V0,6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,35:[2,34],37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},o($V01,[2,33],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,26:20,27:21,6:37,2:$V0,22:$V1,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf}),{2:$V0,4:218,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{2:$V0,6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,35:[1,219],37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},{2:$V0,6:37,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V1,26:20,27:21,30:$V2,31:$V3,35:[1,220],37:$V4,44:$V5,47:$V6,48:$V7,49:$V8,50:$V9,51:$Va,81:$Vb,86:$Vc,87:$Vd,89:$Ve,90:$Vf},o($Vg,[2,29]),o($Vg,[2,35])],
defaultActions: {36:[2,1],91:[2,36],92:[2,37],159:[2,20],198:[2,38],199:[2,39],200:[2,40]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


    let errores = [];

    const Errores = require('./exceptions/Errors');

    const TypeD = require('./symbols/TypeD');

    const Aritmeticas = require('./expressions/Aritmeticas');
    const Nativo = require('./expressions/Nativo');
    const AccessVar = require('./expressions/AccessVar');
    const Relacionales = require('./expressions/Relacionales');
    const Logicas = require('./expressions/Logicas');

    const Cout = require('./instructions/Cout');
    const AssigneVar = require('./instructions/AssigneVar');
    const Declaration = require('./instructions/Declaration');
    const AssigneArr = require('./instructions/AssigneArr');
    const DeclarationArr = require('./instructions/DeclarationArr');
    const Casts = require('./instructions/Casts');
    const ToLower = require('./instructions/ToLower');
    const ToUpper = require('./instructions/ToUpper');
    const Round = require('./instructions/Round');
    const ToString = require('./instructions/ToString');
    const If = require('./instructions/If');
    const For = require('./instructions/For')
    const While = require('./instructions/While')
    const DoWhile = require('./instructions/DoWhile')
    const Break = require('./instructions/Break');
    const Return = require('./instructions/Return');
    const Continue = require('./instructions/Continue');
    const Increment = require('./instructions/Increment');
    const Decrement = require('./instructions/Decrement');
    const Ternary = require('./instructions/Ternary');
    const Switch = require('./instructions/Switch');
    const Case = require('./instructions/Case');
    const Default = require('./instructions/Default');

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */    {}
break;
case 1:/* ignore */    {}
break;
case 2:return  'INT_TYPE'
break;
case 3:return  'DOUBLE_TYPE'
break;
case 4:return  'CHAR_TYPE'
break;
case 5:return  'STRING_TYPE'
break;
case 6:return  'BOOL_TYPE'
break;
case 7:return  'POW'
break;
case 8:return  'COUT'
break;
case 9:return  'NEW'
break;
case 10:return  'STD'
break;
case 11:return  'ENDL'
break;
case 12:return  'IF'
break;
case 13:return  'ELSE'
break;
case 14:return  'SWITCH'
break;
case 15:return  'CASE'
break;
case 16:return  'DEFAULT'
break;
case 17:return  'WHILE'
break;
case 18:return  'DO'
break;
case 19:return  'FOR'
break;
case 20:return  'BREAK'
break;
case 21:return  'CONTINUE'
break;
case 22:return  'RETURN'
break;
case 23:return  'VOID'
break;
case 24:return  'TOLOWER'
break;
case 25:return  'TOUPPER'
break;
case 26:return  'ROUND'
break;
case 27:return  'LENGTH'
break;
case 28:return  'TYPEOF'
break;
case 29:return  'TOSTRING'
break;
case 30:return  'C_STR'
break;
case 31:return  'EXECUTE'
break;
case 32:return  "DOUBLE_QUOTE"
break;
case 33:return  "PLUS"
break;
case 34:return  "MINUS"
break;
case 35:return  "TIMES"
break;
case 36:return  "DIVIDE"
break;
case 37:return  "MOD"
break;
case 38:return  "EQUALS"
break;
case 39:return  "DIFFERENT"
break;
case 40:return  "LESS_EQUAL"
break;
case 41:return  "LESS"
break;
case 42:return  "GREATER_EQUAL"
break;
case 43:return  "GREATER"
break;
case 44:return  "OR"
break;
case 45:return  "AND"
break;
case 46:return  "NOT"
break;
case 47:return  "INTERROGATION"
break;
case 48:return  "COLON"
break;
case 49:return  "SEMICOLON"
break;
case 50:return  "COMMA"
break;
case 51:return  "LPAREN"
break;
case 52:return  "RPAREN"
break;
case 53:return  "LBRACE"
break;
case 54:return  "RBRACE"
break;
case 55:return  "LBRACKET"
break;
case 56:return  "RBRACKET"
break;
case 57:return  "ASSIGN"
break;
case 58:return  "FLOAT"
break;
case 59:return  "INTEGER"
break;
case 60:return  "TRUE"
break;
case 61:return  "FALSE"
break;
case 62:return  "ID"
break;
case 63:return  "CHAR"
break;
case 64:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 74
break;
case 65:/* ignore */    {}
break;
case 66:/* ignore */    {}
break;
case 67:return "EOF"
break;
case 68: errores.push(new Errores.default('Léxico', 'Caracter no valido: ' + yy_.yytext, yy_.yylineno, yy_.yyleng)); 
break;
case 69:


break;
}
},
rules: [/^(?:[/][/].*[\n])/i,/^(?:[/][*][^*]*[*]+([^*/][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:pow\b)/i,/^(?:cout\b)/i,/^(?:new\b)/i,/^(?:std\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:<<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:()?[0-9]+\.[0-9]+)/i,/^(?:()?[0-9]+)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[a-z][a-z0-9_]*)/i,/^(?:[\'][^\'][\'])/i,/^(?:[\"][^\"]*[\"])/i,/^(?:[\ \r\t\f\t]+)/i,/^(?:[\ \n])/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}