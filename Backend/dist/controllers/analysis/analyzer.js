/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,34],$V2=[1,21],$V3=[1,22],$V4=[1,25],$V5=[1,23],$V6=[1,24],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,31],$Vb=[1,29],$Vc=[1,30],$Vd=[1,32],$Ve=[1,33],$Vf=[5,22,30,31,35,37,41,43,44,47,48,49,50,51,81,86,87,89,90],$Vg=[8,33],$Vh=[2,23],$Vi=[1,45],$Vj=[1,48],$Vk=[1,68],$Vl=[1,61],$Vm=[1,74],$Vn=[1,58],$Vo=[1,59],$Vp=[1,60],$Vq=[1,62],$Vr=[1,63],$Vs=[1,64],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,69],$Vx=[1,70],$Vy=[1,71],$Vz=[1,72],$VA=[30,32,33,55,58,62,71,72,73,74,75,76,77,78,79,80,81],$VB=[8,28,29,33,55,57,58],$VC=[2,21],$VD=[1,77],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[1,104],$VP=[1,105],$VQ=[1,106],$VR=[8,23,29,33,42,56,57,58,59,60,61,63,64,65,66,67,68,69,70],$VS=[1,155],$VT=[29,56],$VU=[1,156],$VV=[28,55],$VW=[8,23,29,33,42,56,57,58,63,64,65,66,67,68,69,70],$VX=[8,23,29,33,42,56,63,64,65,66,67,68,69,70],$VY=[1,173],$VZ=[8,23,29,33,42,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70],$V_=[1,180],$V$=[41,43];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCTIONS":4,"EOF":5,"INSTRUCTION":6,"PRINT":7,"SEMICOLON":8,"DECLARATION":9,"ASSINGNEW":10,"ARRAY":11,"INCREMENT":12,"DECREMENT":13,"IF_S":14,"SWITCH_S":15,"WHILE_S":16,"DoWhile":17,"FOR_S":18,"BREAK_S":19,"CONTINUE_S":20,"RETURN_S":21,"COUT":22,"DOUBLE_QUOTE":23,"EXPRESSION":24,"ENDL":25,"TYPES":26,"IDS":27,"ASSIGN":28,"COMMA":29,"ID":30,"IF":31,"LPAREN":32,"RPAREN":33,"LBRACE":34,"RBRACE":35,"ELSE":36,"SWITCH":37,"CASELIST":38,"DEFAULT_S":39,"CASE_S":40,"CASE":41,"COLON":42,"DEFAULT":43,"FOR":44,"FOR_S_DE":45,"FOR_S_UPD":46,"WHILE":47,"DO":48,"BREAK":49,"CONTINUE":50,"RETURN":51,"ARRAYBRACKET":52,"NEW":53,"ASSINGARRAY":54,"LBRACKET":55,"RBRACKET":56,"PLUS":57,"MINUS":58,"TIMES":59,"DIVIDE":60,"MOD":61,"POW":62,"EQUALS":63,"DIFFERENT":64,"LESS":65,"GREATER":66,"LESS_EQUAL":67,"GREATER_EQUAL":68,"OR":69,"AND":70,"NOT":71,"INTEGER":72,"FLOAT":73,"STRING":74,"TRUE":75,"FALSE":76,"CHAR":77,"TOLOWER":78,"TOUPPER":79,"ROUND":80,"STD":81,"TOSTRING":82,"LISTF":83,"INTERROGATION":84,"LIST":85,"INT_TYPE":86,"DOUBLE_TYPE":87,"STRING_TYPE":88,"CHAR_TYPE":89,"BOOL_TYPE":90,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"SEMICOLON",22:"COUT",23:"DOUBLE_QUOTE",25:"ENDL",28:"ASSIGN",29:"COMMA",30:"ID",31:"IF",32:"LPAREN",33:"RPAREN",34:"LBRACE",35:"RBRACE",36:"ELSE",37:"SWITCH",41:"CASE",42:"COLON",43:"DEFAULT",44:"FOR",47:"WHILE",48:"DO",49:"BREAK",50:"CONTINUE",51:"RETURN",53:"NEW",55:"LBRACKET",56:"RBRACKET",57:"PLUS",58:"MINUS",59:"TIMES",60:"DIVIDE",61:"MOD",62:"POW",63:"EQUALS",64:"DIFFERENT",65:"LESS",66:"GREATER",67:"LESS_EQUAL",68:"GREATER_EQUAL",69:"OR",70:"AND",71:"NOT",72:"INTEGER",73:"FLOAT",74:"STRING",75:"TRUE",76:"FALSE",77:"CHAR",78:"TOLOWER",79:"TOUPPER",80:"ROUND",81:"STD",82:"TOSTRING",84:"INTERROGATION",86:"INT_TYPE",87:"DOUBLE_TYPE",88:"STRING_TYPE",89:"CHAR_TYPE",90:"BOOL_TYPE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,3],[7,5],[9,4],[9,2],[10,3],[10,1],[27,3],[27,1],[14,7],[14,11],[14,9],[15,8],[38,2],[38,1],[40,4],[39,3],[18,11],[45,1],[45,1],[46,1],[46,1],[46,1],[16,7],[17,8],[19,2],[20,2],[21,2],[21,3],[11,7],[11,5],[54,2],[52,3],[52,2],[12,3],[13,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,6],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,4],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,4],[24,4],[24,4],[24,7],[24,1],[24,7],[85,3],[85,1],[83,4],[83,3],[26,1],[26,1],[26,4],[26,1],[26,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$= $$[$0-1]; 
break;
case 3: case 25: case 31: case 85:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 69:
 this.$ = $$[$0-1]; 
break;
case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 35: case 36: case 37: case 38: case 39: case 82:
 this.$ = $$[$0]; 
break;
case 18:
 this.$ = new Cout.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column, false); 
break;
case 19:
 this.$ = new Cout.default($$[$0-2], _$[$0-4].first_line, _$[$0-4].first_column, true); 
break;
case 20:
 this.$ = new Declaration.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].first_column, $$[$0-2], $$[$0]); 
break;
case 21:
 this.$ = new Declaration.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 22:
 this.$ = new AssigneVar.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0]); 
break;
case 23:
 this.$ = new AssigneVar.default($$[$0], _$[$0].first_line, _$[$0].first_column, $$[$02]); 
break;
case 24:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 26:
 this.$ = new If.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column, false); 
break;
case 27:
 this.$ = new If.default($$[$0-8], $$[$0-5], _$[$0-10].first_line, _$[$0-10].first_column, true, $$[$0-1]); 
break;
case 28:
 this.$ = new If.default($$[$0-6], $$[$0-3], _$[$0-8].first_line, _$[$0-8].first_column, false); 
break;
case 29:
 this.$ = new Switch.default($$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column, $$[$0-2], $$[$0-1]); 
break;
case 30:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 32:
 this.$ = new Case.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 33:
 this.$ = new Default.default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 34:
 this.$ = new For.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].first_column); 
break;
case 40:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 41:
 this.$ = new DoWhile.default($$[$0-1], $$[$0-5], _$[$0-7].first_line, _$[$0-7].first_column); 
break;
case 42:
 this.$ = new Break.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 43:
 this.$ = new Continue.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 44:
 this.$ = new Return.default(_$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 45:
 this.$ = new Return.default(_$[$0-2].first_line, _$[$0-2].first_column, $$[$0-1]); 
break;
case 46:
 this.$ = new DeclarationArr.default($$[$0-6], $$[$0-5], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 47:
 this.$ = new DeclarationArr.default($$[$0-4], $$[$0-3], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 48:
 this.$ = new AssigneArr.default($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 49:
 this.$ = $$[$0-2]; 
break;
case 50:
 this.$ = []; 
break;
case 51:
 this.$ = new Increment.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 52:
 this.$ = new Decrement.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 53:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.PLUS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 54:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.MINUS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 55:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.TIMES, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 56:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.DIV, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 57:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.MOD, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 58:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.NEGATIVE, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]); 
break;
case 59:
 this.$ = new Aritmeticas.default(Aritmeticas.ArithmeticOption.POWER, _$[$0-5].first_line, _$[$0-5].first_column, $$[$0-3], $$[$0-1]);
break;
case 60:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.EQUALS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 61:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.DIFFERENT, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 62:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.LESS, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 63:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.GREATER, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 64:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.LESS_EQUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 65:
 this.$ = new Relacionales.default(Relacionales.RelationalOption.GREATER_EQUAL, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 66:
 this.$ = new Logicas.default(Logicas.LogicasOption.OR, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 67:
 this.$ = new Logicas.default(Logicas.LogicasOption.AND, _$[$0-2].first_line, _$[$0-2].first_column, $$[$0-2], $$[$0]);
break;
case 68:
 this.$ = new Logicas.default(Logicas.LogicasOption.NOT, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
break;
case 70:
 this.$ = new Casts.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 71:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.INT), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 72:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.FLOAT), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 73:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.STRING), $$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 74: case 75:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.BOOL), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 76:
 this.$ = new Nativo.default(new TypeD.default(TypeD.typeData.CHAR), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 77:
 this.$ = new AccessVar.default($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 78:
 this.$ = new ToLower.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 79:
 this.$ = new ToUpper.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 80:
 this.$ = new Round.default($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 81:
 this.$ = new ToString.default($$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 83:
 this.$ = new Ternary.default($$[$0-5], $$[$0-2], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column); 
break;
case 84:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 86:
 $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 87:
 this.$ = [$$[$0-1]]; 
break;
case 88:
this.$ = new TypeD.default(TypeD.typeData.INT);
break;
case 89:
this.$ = new TypeD.default(TypeD.typeData.FLOAT);
break;
case 90:
this.$ = new TypeD.default(TypeD.typeData.STRING);
break;
case 91:
this.$ = new TypeD.default(TypeD.typeData.CHAR);
break;
case 92:
this.$ = new TypeD.default(TypeD.typeData.BOOL);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{1:[3]},{5:[1,35],6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},o($Vf,[2,3]),{8:[1,37]},{8:[1,38]},{8:[1,39]},{8:[1,40]},{8:[1,41]},{8:[1,42]},o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vf,[2,13]),o($Vf,[2,14]),o($Vf,[2,15]),o($Vf,[2,16]),o($Vf,[2,17]),{23:[1,43]},{27:44,30:$V1},o($Vg,$Vh,{28:$Vi,29:$Vj,57:[1,46],58:[1,47]}),{32:[1,49]},{32:[1,50]},{32:[1,51]},{34:[1,52]},{32:[1,53]},{8:[1,54]},{8:[1,55]},{8:[1,56],24:57,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},o($VA,[2,88]),o($VA,[2,89]),{42:[1,75]},o($VA,[2,91]),o($VA,[2,92]),o($VB,[2,25]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),{24:76,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{8:$VC,28:$VD,29:$Vj,52:78,55:[1,79]},{24:80,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{57:[1,81]},{58:[1,82]},{30:[1,83]},{24:84,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:85,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:86,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{4:87,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{9:89,10:90,26:91,27:92,30:$V1,45:88,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},o($Vf,[2,42]),o($Vf,[2,43]),o($Vf,[2,44]),{8:[1,93],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{24:107,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{32:[1,108]},{24:109,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:110,26:111,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:[1,112],83:73,86:$Vb,87:$Vc,89:$Vd,90:$Ve},o($VR,[2,71]),o($VR,[2,72]),o($VR,[2,73]),o($VR,[2,74]),o($VR,[2,75]),o($VR,[2,76]),o($VR,[2,77]),{32:[1,113]},{32:[1,114]},{32:[1,115]},{42:[1,116]},o($VR,[2,82],{55:[1,117]}),{24:119,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73,85:118},{42:[1,120]},{8:[2,18],23:[1,121],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{24:122,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{28:[1,123],55:[1,124]},{56:[1,125]},o($Vg,[2,22],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ}),o($Vg,[2,51]),o($Vg,[2,52]),o($VB,[2,24]),{33:[1,126],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{33:[1,127],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{33:[1,128],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,35:[1,129],37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{8:[1,130]},{8:[2,35]},{8:[2,36]},{27:131,30:$V1},{8:$Vh,28:$Vi,29:$Vj},o($Vf,[2,45]),{24:132,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:133,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:134,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:135,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:136,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:137,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:138,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:139,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:140,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:141,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:142,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:143,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:144,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},o($VR,[2,58]),{24:145,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},o($VR,[2,68]),{33:[1,146],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{33:[1,147]},{42:[1,148]},{24:149,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:150,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:151,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{42:[1,152]},{24:119,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73,85:153},{29:$VS,56:[1,154]},o($VT,[2,85],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ}),{88:$VU},{25:[1,157]},{8:[2,20],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{24:159,30:$Vk,32:$Vl,53:[1,158],55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{56:[1,160]},o($VV,[2,50]),{34:[1,161]},{34:[1,162]},{34:[1,163]},{47:[1,164]},{24:165,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{8:$VC,28:$VD,29:$Vj},o($VW,[2,53],{59:$VG,60:$VH,61:$VI}),o($VW,[2,54],{59:$VG,60:$VH,61:$VI}),o($VR,[2,55]),o($VR,[2,56]),o($VR,[2,57]),o($VX,[2,60],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($VX,[2,61],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($VX,[2,62],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($VX,[2,63],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($VX,[2,64],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o($VX,[2,65],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI}),o([8,23,29,33,42,56,69],[2,66],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,70:$VQ}),o([8,23,29,33,42,56,69,70],[2,67],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO}),{29:[1,166],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},o($VR,[2,69],{84:[1,167]}),{24:168,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{42:[1,169]},{33:[1,170],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{33:[1,171],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{33:[1,172],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{82:$VY},{29:$VS,56:[1,174]},o($VZ,[2,87]),{24:175,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},o($VA,[2,90]),{8:[2,19]},{26:176,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{8:[2,47],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},o($VV,[2,49]),{4:177,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{38:178,40:179,41:$V_},{4:181,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{32:[1,182]},{8:[1,183],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{24:184,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{24:185,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},o($VR,[2,70]),{82:$VY,88:$VU},o($VR,[2,78]),o($VR,[2,79]),o($VR,[2,80]),{32:[1,186]},o($VZ,[2,86]),o($VT,[2,84],{57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ}),{24:187,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,35:[1,188],37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{39:189,40:190,41:$V_,43:[1,191]},o($V$,[2,31]),{24:192,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,35:[1,193],37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{24:194,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{10:198,12:196,13:197,27:20,30:$V1,46:195},{33:[1,199],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{42:[1,200],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{24:201,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{8:[2,46],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},o($Vf,[2,26],{36:[1,202]}),{35:[1,203]},o($V$,[2,30]),{42:[1,204]},{42:[1,205],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},o($Vf,[2,40]),{33:[1,206],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{33:[1,207]},{33:[2,37]},{33:[2,38]},{33:[2,39]},o($VR,[2,59]),{24:208,30:$Vk,32:$Vl,55:$Vm,58:$Vn,62:$Vo,71:$Vp,72:$Vq,73:$Vr,74:$Vs,75:$Vt,76:$Vu,77:$Vv,78:$Vw,79:$Vx,80:$Vy,81:$Vz,83:73},{33:[1,209],57:$VE,58:$VF,59:$VG,60:$VH,61:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{14:211,31:$V2,34:[1,210]},o($Vf,[2,29]),{4:212,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{4:213,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},o($Vf,[2,41]),{34:[1,214]},o($VR,[2,83]),o($VR,[2,81]),{4:215,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},o($Vf,[2,28]),{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,35:[2,33],37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},o($V$,[2,32],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,26:19,27:20,6:36,22:$V0,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve}),{4:216,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,35:[1,217],37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},{6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:$V0,26:19,27:20,30:$V1,31:$V2,35:[1,218],37:$V3,44:$V4,47:$V5,48:$V6,49:$V7,50:$V8,51:$V9,81:$Va,86:$Vb,87:$Vc,89:$Vd,90:$Ve},o($Vf,[2,27]),o($Vf,[2,34])],
defaultActions: {35:[2,1],89:[2,35],90:[2,36],157:[2,19],196:[2,37],197:[2,38],198:[2,39]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const TypeD = require('./symbols/TypeD');

    const Aritmeticas = require('./expressions/Aritmeticas');
    const Nativo = require('./expressions/Nativo');
    const AccessVar = require('./expressions/AccessVar');
    const Relacionales = require('./expressions/Relacionales');
    const Logicas = require('./expressions/Logicas');

    const Cout = require('./instructions/Cout');
    const AssigneVar = require('./instructions/AssigneVar');
    const Declaration = require('./instructions/Declaration');
    const AssigneArr = require('./instructions/AssigneArr');
    const DeclarationArr = require('./instructions/DeclarationArr');
    const Casts = require('./instructions/Casts');
    const ToLower = require('./instructions/ToLower');
    const ToUpper = require('./instructions/ToUpper');
    const Round = require('./instructions/Round');
    const ToString = require('./instructions/ToString');
    const If = require('./instructions/If');
    const For = require('./instructions/For')
    const While = require('./instructions/While')
    const DoWhile = require('./instructions/DoWhile')
    const Break = require('./instructions/Break');
    const Return = require('./instructions/Return');
    const Continue = require('./instructions/Continue');
    const Increment = require('./instructions/Increment');
    const Decrement = require('./instructions/Decrement');
    const Ternary = require('./instructions/Ternary');
    const Switch = require('./instructions/Switch');
    const Case = require('./instructions/Case');
    const Default = require('./instructions/Default');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */    {}
break;
case 1:/* ignore */    {}
break;
case 2:return  'INT_TYPE'
break;
case 3:return  'DOUBLE_TYPE'
break;
case 4:return  'CHAR_TYPE'
break;
case 5:return  'STRING_TYPE'
break;
case 6:return  'BOOL_TYPE'
break;
case 7:return  'POW'
break;
case 8:return  'COUT'
break;
case 9:return  'NEW'
break;
case 10:return  'STD'
break;
case 11:return  'ENDL'
break;
case 12:return  'IF'
break;
case 13:return  'ELSE'
break;
case 14:return  'SWITCH'
break;
case 15:return  'CASE'
break;
case 16:return  'DEFAULT'
break;
case 17:return  'WHILE'
break;
case 18:return  'DO'
break;
case 19:return  'FOR'
break;
case 20:return  'BREAK'
break;
case 21:return  'CONTINUE'
break;
case 22:return  'RETURN'
break;
case 23:return  'VOID'
break;
case 24:return  'TOLOWER'
break;
case 25:return  'TOUPPER'
break;
case 26:return  'ROUND'
break;
case 27:return  'LENGTH'
break;
case 28:return  'TYPEOF'
break;
case 29:return  'TOSTRING'
break;
case 30:return  'C_STR'
break;
case 31:return  'EXECUTE'
break;
case 32:return  "DOUBLE_QUOTE"
break;
case 33:return  "PLUS"
break;
case 34:return  "MINUS"
break;
case 35:return  "TIMES"
break;
case 36:return  "DIVIDE"
break;
case 37:return  "MOD"
break;
case 38:return  "EQUALS"
break;
case 39:return  "DIFFERENT"
break;
case 40:return  "LESS_EQUAL"
break;
case 41:return  "LESS"
break;
case 42:return  "GREATER_EQUAL"
break;
case 43:return  "GREATER"
break;
case 44:return  "OR"
break;
case 45:return  "AND"
break;
case 46:return  "NOT"
break;
case 47:return  "INTERROGATION"
break;
case 48:return  "COLON"
break;
case 49:return  "SEMICOLON"
break;
case 50:return  "COMMA"
break;
case 51:return  "LPAREN"
break;
case 52:return  "RPAREN"
break;
case 53:return  "LBRACE"
break;
case 54:return  "RBRACE"
break;
case 55:return  "LBRACKET"
break;
case 56:return  "RBRACKET"
break;
case 57:return  "ASSIGN"
break;
case 58:return  "FLOAT"
break;
case 59:return  "INTEGER"
break;
case 60:return  "TRUE"
break;
case 61:return  "FALSE"
break;
case 62:return  "ID"
break;
case 63:return  "CHAR"
break;
case 64:yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 74
break;
case 65:/* ignore */    {}
break;
case 66:/* ignore */    {}
break;
case 67:return "EOF"
break;
case 68:return "UNEXPECTED_TOKEN"
break;
case 69:


break;
}
},
rules: [/^(?:[/][/].*[\n])/i,/^(?:[/][*][^*]*[*]+([^*/][^*]*[*]+)*[/])/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:bool\b)/i,/^(?:pow\b)/i,/^(?:cout\b)/i,/^(?:new\b)/i,/^(?:std\b)/i,/^(?:endl\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:c_str\b)/i,/^(?:execute\b)/i,/^(?:<<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:;)/i,/^(?:,)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:=)/i,/^(?:()?[0-9]+\.[0-9]+)/i,/^(?:()?[0-9]+)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[a-z][a-z0-9_]*)/i,/^(?:[\'][^\'][\'])/i,/^(?:[\"][^\"]*[\"])/i,/^(?:[\ \r\t\f\t]+)/i,/^(?:[\ \n])/i,/^(?:$)/i,/^(?:.)/i,/^(?:)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analyzer;
exports.Parser = analyzer.Parser;
exports.parse = function () { return analyzer.parse.apply(analyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}